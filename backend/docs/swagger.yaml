openapi: 3.0.0
info:
  title: Dashboard API
  description: API for managing user accounts, dashboards, and charts.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local Development Server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Verifies if the server is up and running.
      responses:
        '200':
          description: Server is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "healthy"

  /auth/signup:
    post:
      summary: User sign-up
      description: Registers a new user.
      requestBody:
        description: User details for registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid request data (e.g., missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /auth/login:
    post:
      summary: User login
      description: Logs in a user and returns a JWT token.
      requestBody:
        description: User credentials for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns user details and token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /dashboards:
    get:
      summary: Get all dashboards for the authenticated user
      description: Returns a list of dashboards for the logged-in user.
      responses:
        '200':
          description: List of dashboards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardInfo'
        '401':
          description: Unauthorized, user not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

    post:
      summary: Create a new dashboard
      description: Creates a new dashboard for the authenticated user.
      requestBody:
        description: Dashboard creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDashboardRequest'
      responses:
        '201':
          description: Dashboard created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /dashboards/{dashboardId}:
    get:
      summary: Get a specific dashboard by ID
      description: Fetches the details of a dashboard by its ID.
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The ID of the dashboard to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Dashboard details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDetail'
        '404':
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

    put:
      summary: Update a dashboard
      description: Updates the name of a specific dashboard by ID.
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The ID of the dashboard to update
          schema:
            type: integer
      requestBody:
        description: Updated dashboard name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDashboardRequest'
      responses:
        '200':
          description: Dashboard updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /dashboards/{dashboardId}/charts:
    post:
      summary: Add a new chart to a dashboard
      description: Creates a new chart in a specified dashboard.
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The ID of the dashboard to add the chart to
          schema:
            type: integer
      requestBody:
        description: Chart creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChartRequest'
      responses:
        '201':
          description: Chart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /dashboards/{dashboardId}/charts/{chartId}:
    put:
      summary: Update a chart
      description: Updates a chart within a dashboard by its ID.
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The ID of the dashboard containing the chart
          schema:
            type: integer
        - name: chartId
          in: path
          required: true
          description: The ID of the chart to update
          schema:
            type: integer
      requestBody:
        description: Updated chart details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartDetail'
      responses:
        '200':
          description: Chart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Chart or dashboard not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

components:
  schemas:
    Response:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the request was successful
          example: true
        data:
          type: object
          description: Data for the response
          example: {}
        message:
          type: string
          description: Message for successful requests
          example: "User created successfully with id: 1"
        error:
          type: string
          description: Error message for failed requests
          example: "Invalid credentials"
      
    SignupRequest:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: "john_doe"
        email:
          type: string
          description: Email of the user
          example: "john.doe@example.com"
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        password:
          type: string
          description: Password of the user
          example: "password123"

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: "john_doe"
        password:
          type: string
          description: Password of the user
          example: "password123"

    CreateDashboardRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the dashboard
          example: "Sales Dashboard"

    DashboardInfo:
      type: object
      properties:
        id:
          type: integer
          description: ID of the dashboard
          example: 1
        name:
          type: string
          description: Name of the dashboard
          example: "Sales Dashboard"
        charts_count:
          type: integer
          description: Number of charts in the dashboard
          example: 3

    DashboardDetail:
      type: object
      properties:
        id:
          type: integer
          description: ID of the dashboard
          example: 1
        name:
          type: string
          description: Name of the dashboard
          example: "Sales Dashboard"
        charts:
          type: array
          items:
            $ref: '#/components/schemas/ChartDetail'

    ChartDetail:
      type: object
      properties:
        id:
          type: integer
          description: ID of the chart
          example: 1
        type:
          type: string
          description: Type of the chart (e.g., bar, line)
          example: "bar"
        data:
          type: string
          description: JSON formatted data for the chart
          example: '{"labels": ["January", "February"], "datasets": [{"data": [12, 19]}]}'

    CreateChartRequest:
      type: object
      properties:
        type:
          type: string
          description: Type of the chart
          example: "bar"
        data:
          type: string
          description: JSON formatted data for the chart
          example: '{"labels": ["January", "February"], "datasets": [{"data": [12, 19]}]}'
